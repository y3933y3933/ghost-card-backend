// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rounds.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRound = `-- name: CreateRound :one
INSERT INTO rounds (
  game_id, question_id, current_player_id, is_joker, status
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, game_id, question_id, current_player_id, is_joker, status, created_at
`

type CreateRoundParams struct {
	GameID          int64
	QuestionID      int64
	CurrentPlayerID int64
	IsJoker         pgtype.Bool
	Status          string
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRow(ctx, createRound,
		arg.GameID,
		arg.QuestionID,
		arg.CurrentPlayerID,
		arg.IsJoker,
		arg.Status,
	)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.CurrentPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoundsByGame = `-- name: DeleteRoundsByGame :exec
DELETE FROM rounds
WHERE game_id = $1
`

func (q *Queries) DeleteRoundsByGame(ctx context.Context, gameID int64) error {
	_, err := q.db.Exec(ctx, deleteRoundsByGame, gameID)
	return err
}

const getCurrentRoundByGameCode = `-- name: GetCurrentRoundByGameCode :one
SELECT r.id AS round_id,
       q.content AS question,
       p.id AS player_id,
       p.nickname,
       r.is_joker,
       r.status
FROM rounds r
JOIN games g ON g.id = r.game_id
JOIN questions q ON q.id = r.question_id
JOIN players p ON p.id = r.current_player_id
WHERE g.code = $1
ORDER BY r.created_at DESC
LIMIT 1
`

type GetCurrentRoundByGameCodeRow struct {
	RoundID  int64
	Question string
	PlayerID int64
	Nickname string
	IsJoker  pgtype.Bool
	Status   string
}

func (q *Queries) GetCurrentRoundByGameCode(ctx context.Context, code string) (GetCurrentRoundByGameCodeRow, error) {
	row := q.db.QueryRow(ctx, getCurrentRoundByGameCode, code)
	var i GetCurrentRoundByGameCodeRow
	err := row.Scan(
		&i.RoundID,
		&i.Question,
		&i.PlayerID,
		&i.Nickname,
		&i.IsJoker,
		&i.Status,
	)
	return i, err
}

const getLatestRoundByGameID = `-- name: GetLatestRoundByGameID :one
SELECT id, game_id, question_id, current_player_id, is_joker, status, created_at
FROM rounds
WHERE game_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestRoundByGameID(ctx context.Context, gameID int64) (Round, error) {
	row := q.db.QueryRow(ctx, getLatestRoundByGameID, gameID)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.CurrentPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getRoundByID = `-- name: GetRoundByID :one
SELECT id, game_id, question_id, current_player_id, is_joker, status, created_at FROM rounds
WHERE id = $1
`

func (q *Queries) GetRoundByID(ctx context.Context, id int64) (Round, error) {
	row := q.db.QueryRow(ctx, getRoundByID, id)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.CurrentPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listRoundsByGame = `-- name: ListRoundsByGame :many
SELECT id, game_id, question_id, current_player_id, is_joker, status, created_at FROM rounds
WHERE game_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListRoundsByGame(ctx context.Context, gameID int64) ([]Round, error) {
	rows, err := q.db.Query(ctx, listRoundsByGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Round
	for rows.Next() {
		var i Round
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.QuestionID,
			&i.CurrentPlayerID,
			&i.IsJoker,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revealRound = `-- name: RevealRound :exec
UPDATE rounds
SET is_joker = $2,
    status = 'revealed'
WHERE id = $1
`

type RevealRoundParams struct {
	ID      int64
	IsJoker pgtype.Bool
}

func (q *Queries) RevealRound(ctx context.Context, arg RevealRoundParams) error {
	_, err := q.db.Exec(ctx, revealRound, arg.ID, arg.IsJoker)
	return err
}
