// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rounds.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRound = `-- name: CreateRound :one
INSERT INTO rounds (game_id, question_id, current_player_id, status)
VALUES ($1, $2, $3, 'pending')
RETURNING id, question_id, current_player_id, status, created_at
`

type CreateRoundParams struct {
	GameID          int64
	QuestionID      int64
	CurrentPlayerID int64
}

type CreateRoundRow struct {
	ID              int64
	QuestionID      int64
	CurrentPlayerID int64
	Status          string
	CreatedAt       pgtype.Timestamptz
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (CreateRoundRow, error) {
	row := q.db.QueryRow(ctx, createRound, arg.GameID, arg.QuestionID, arg.CurrentPlayerID)
	var i CreateRoundRow
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.CurrentPlayerID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getCurrentRoundByGameCode = `-- name: GetCurrentRoundByGameCode :one
SELECT r.id, r.current_player_id, r.question_id, r.is_joker, r.created_at, g.id AS game_id,
       r.status, g.level,
       q.content AS question_content
FROM rounds r
JOIN games g ON r.game_id = g.id
JOIN questions q ON r.question_id = q.id
WHERE g.code = $1
ORDER BY r.created_at DESC
LIMIT 1
`

type GetCurrentRoundByGameCodeRow struct {
	ID              int64
	CurrentPlayerID int64
	QuestionID      int64
	IsJoker         pgtype.Bool
	CreatedAt       pgtype.Timestamptz
	GameID          int64
	Status          string
	Level           string
	QuestionContent string
}

func (q *Queries) GetCurrentRoundByGameCode(ctx context.Context, code string) (GetCurrentRoundByGameCodeRow, error) {
	row := q.db.QueryRow(ctx, getCurrentRoundByGameCode, code)
	var i GetCurrentRoundByGameCodeRow
	err := row.Scan(
		&i.ID,
		&i.CurrentPlayerID,
		&i.QuestionID,
		&i.IsJoker,
		&i.CreatedAt,
		&i.GameID,
		&i.Status,
		&i.Level,
		&i.QuestionContent,
	)
	return i, err
}

const getLatestRoundInGame = `-- name: GetLatestRoundInGame :one
SELECT id, game_id, question_id, current_player_id, is_joker, status, created_at FROM rounds
WHERE game_id = $1
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLatestRoundInGame(ctx context.Context, gameID int64) (Round, error) {
	row := q.db.QueryRow(ctx, getLatestRoundInGame, gameID)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.CurrentPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getRoundByID = `-- name: GetRoundByID :one
SELECT id, game_id, question_id, current_player_id, is_joker, status, created_at FROM rounds WHERE id = $1
`

func (q *Queries) GetRoundByID(ctx context.Context, id int64) (Round, error) {
	row := q.db.QueryRow(ctx, getRoundByID, id)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.QuestionID,
		&i.CurrentPlayerID,
		&i.IsJoker,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateRoundStatus = `-- name: UpdateRoundStatus :exec
UPDATE rounds SET is_joker = $2, status = $3 WHERE id = $1
`

type UpdateRoundStatusParams struct {
	ID      int64
	IsJoker pgtype.Bool
	Status  string
}

func (q *Queries) UpdateRoundStatus(ctx context.Context, arg UpdateRoundStatusParams) error {
	_, err := q.db.Exec(ctx, updateRoundStatus, arg.ID, arg.IsJoker, arg.Status)
	return err
}
