// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package database

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (code, level, status)
VALUES ($1, $2, $3)
RETURNING id, code, level, status, created_at, updated_at
`

type CreateGameParams struct {
	Code   string
	Level  string
	Status string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, arg.Code, arg.Level, arg.Status)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Level,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const getGameByCode = `-- name: GetGameByCode :one
SELECT id, code, level, status, created_at, updated_at FROM games
WHERE code = $1
`

func (q *Queries) GetGameByCode(ctx context.Context, code string) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByCode, code)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Level,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGameByID = `-- name: GetGameByID :one
SELECT id, code, level, status, created_at, updated_at FROM games
WHERE id = $1
`

func (q *Queries) GetGameByID(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByID, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Level,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, code, level, status, created_at, updated_at FROM games
ORDER BY created_at DESC
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Level,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGameStatus = `-- name: UpdateGameStatus :exec
UPDATE games
SET status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateGameStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateGameStatus(ctx context.Context, arg UpdateGameStatusParams) error {
	_, err := q.db.Exec(ctx, updateGameStatus, arg.ID, arg.Status)
	return err
}
